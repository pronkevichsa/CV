//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace viewer2 {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dbaseDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dbaseDataSet : System.Data.DataSet {
        
        private DayEnDataTable tableDayEn;
        
        private EnergyDataTable tableEnergy;
        
        private Energy30DataTable tableEnergy30;
        
        private FamilyDataTable tableFamily;
        
        private Power3DataTable tablePower3;
        
        private Power30DataTable tablePower30;
        
        private SchetchikDataTable tableSchetchik;
        
        private tttDataTable tablettt;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dbaseDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dbaseDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DayEn"] != null)) {
                    base.Tables.Add(new DayEnDataTable(ds.Tables["DayEn"]));
                }
                if ((ds.Tables["Energy"] != null)) {
                    base.Tables.Add(new EnergyDataTable(ds.Tables["Energy"]));
                }
                if ((ds.Tables["Energy30"] != null)) {
                    base.Tables.Add(new Energy30DataTable(ds.Tables["Energy30"]));
                }
                if ((ds.Tables["Family"] != null)) {
                    base.Tables.Add(new FamilyDataTable(ds.Tables["Family"]));
                }
                if ((ds.Tables["Power3"] != null)) {
                    base.Tables.Add(new Power3DataTable(ds.Tables["Power3"]));
                }
                if ((ds.Tables["Power30"] != null)) {
                    base.Tables.Add(new Power30DataTable(ds.Tables["Power30"]));
                }
                if ((ds.Tables["Schetchik"] != null)) {
                    base.Tables.Add(new SchetchikDataTable(ds.Tables["Schetchik"]));
                }
                if ((ds.Tables["ttt"] != null)) {
                    base.Tables.Add(new tttDataTable(ds.Tables["ttt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DayEnDataTable DayEn {
            get {
                return this.tableDayEn;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnergyDataTable Energy {
            get {
                return this.tableEnergy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Energy30DataTable Energy30 {
            get {
                return this.tableEnergy30;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FamilyDataTable Family {
            get {
                return this.tableFamily;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Power3DataTable Power3 {
            get {
                return this.tablePower3;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Power30DataTable Power30 {
            get {
                return this.tablePower30;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchetchikDataTable Schetchik {
            get {
                return this.tableSchetchik;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tttDataTable ttt {
            get {
                return this.tablettt;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dbaseDataSet cln = ((dbaseDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DayEn"] != null)) {
                    base.Tables.Add(new DayEnDataTable(ds.Tables["DayEn"]));
                }
                if ((ds.Tables["Energy"] != null)) {
                    base.Tables.Add(new EnergyDataTable(ds.Tables["Energy"]));
                }
                if ((ds.Tables["Energy30"] != null)) {
                    base.Tables.Add(new Energy30DataTable(ds.Tables["Energy30"]));
                }
                if ((ds.Tables["Family"] != null)) {
                    base.Tables.Add(new FamilyDataTable(ds.Tables["Family"]));
                }
                if ((ds.Tables["Power3"] != null)) {
                    base.Tables.Add(new Power3DataTable(ds.Tables["Power3"]));
                }
                if ((ds.Tables["Power30"] != null)) {
                    base.Tables.Add(new Power30DataTable(ds.Tables["Power30"]));
                }
                if ((ds.Tables["Schetchik"] != null)) {
                    base.Tables.Add(new SchetchikDataTable(ds.Tables["Schetchik"]));
                }
                if ((ds.Tables["ttt"] != null)) {
                    base.Tables.Add(new tttDataTable(ds.Tables["ttt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDayEn = ((DayEnDataTable)(base.Tables["DayEn"]));
            if ((initTable == true)) {
                if ((this.tableDayEn != null)) {
                    this.tableDayEn.InitVars();
                }
            }
            this.tableEnergy = ((EnergyDataTable)(base.Tables["Energy"]));
            if ((initTable == true)) {
                if ((this.tableEnergy != null)) {
                    this.tableEnergy.InitVars();
                }
            }
            this.tableEnergy30 = ((Energy30DataTable)(base.Tables["Energy30"]));
            if ((initTable == true)) {
                if ((this.tableEnergy30 != null)) {
                    this.tableEnergy30.InitVars();
                }
            }
            this.tableFamily = ((FamilyDataTable)(base.Tables["Family"]));
            if ((initTable == true)) {
                if ((this.tableFamily != null)) {
                    this.tableFamily.InitVars();
                }
            }
            this.tablePower3 = ((Power3DataTable)(base.Tables["Power3"]));
            if ((initTable == true)) {
                if ((this.tablePower3 != null)) {
                    this.tablePower3.InitVars();
                }
            }
            this.tablePower30 = ((Power30DataTable)(base.Tables["Power30"]));
            if ((initTable == true)) {
                if ((this.tablePower30 != null)) {
                    this.tablePower30.InitVars();
                }
            }
            this.tableSchetchik = ((SchetchikDataTable)(base.Tables["Schetchik"]));
            if ((initTable == true)) {
                if ((this.tableSchetchik != null)) {
                    this.tableSchetchik.InitVars();
                }
            }
            this.tablettt = ((tttDataTable)(base.Tables["ttt"]));
            if ((initTable == true)) {
                if ((this.tablettt != null)) {
                    this.tablettt.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dbaseDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dbaseDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDayEn = new DayEnDataTable();
            base.Tables.Add(this.tableDayEn);
            this.tableEnergy = new EnergyDataTable();
            base.Tables.Add(this.tableEnergy);
            this.tableEnergy30 = new Energy30DataTable();
            base.Tables.Add(this.tableEnergy30);
            this.tableFamily = new FamilyDataTable();
            base.Tables.Add(this.tableFamily);
            this.tablePower3 = new Power3DataTable();
            base.Tables.Add(this.tablePower3);
            this.tablePower30 = new Power30DataTable();
            base.Tables.Add(this.tablePower30);
            this.tableSchetchik = new SchetchikDataTable();
            base.Tables.Add(this.tableSchetchik);
            this.tablettt = new tttDataTable();
            base.Tables.Add(this.tablettt);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDayEn() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnergy() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnergy30() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFamily() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePower3() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePower30() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchetchik() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializettt() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dbaseDataSet ds = new dbaseDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DayEnRowChangeEventHandler(object sender, DayEnRowChangeEvent e);
        
        public delegate void EnergyRowChangeEventHandler(object sender, EnergyRowChangeEvent e);
        
        public delegate void Energy30RowChangeEventHandler(object sender, Energy30RowChangeEvent e);
        
        public delegate void FamilyRowChangeEventHandler(object sender, FamilyRowChangeEvent e);
        
        public delegate void Power3RowChangeEventHandler(object sender, Power3RowChangeEvent e);
        
        public delegate void Power30RowChangeEventHandler(object sender, Power30RowChangeEvent e);
        
        public delegate void SchetchikRowChangeEventHandler(object sender, SchetchikRowChangeEvent e);
        
        public delegate void tttRowChangeEventHandler(object sender, tttRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DayEnDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnData_s;
            
            private System.Data.DataColumn columnT_1_A;
            
            private System.Data.DataColumn columnT_2_A;
            
            private System.Data.DataColumn columnT_3_A;
            
            private System.Data.DataColumn columnT_1_R;
            
            private System.Data.DataColumn columnT_2_R;
            
            private System.Data.DataColumn columnT_3_R;
            
            private System.Data.DataColumn columnSutki_A;
            
            private System.Data.DataColumn columnSutki_R;
            
            private System.Data.DataColumn columnNarast_A;
            
            private System.Data.DataColumn columnNarast_R;
            
            private System.Data.DataColumn columnMax_A;
            
            private System.Data.DataColumn columnMax_R;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DayEnDataTable() {
                this.TableName = "DayEn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DayEnDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DayEnDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Data_sColumn {
                get {
                    return this.columnData_s;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_1_AColumn {
                get {
                    return this.columnT_1_A;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_2_AColumn {
                get {
                    return this.columnT_2_A;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_3_AColumn {
                get {
                    return this.columnT_3_A;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_1_RColumn {
                get {
                    return this.columnT_1_R;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_2_RColumn {
                get {
                    return this.columnT_2_R;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn T_3_RColumn {
                get {
                    return this.columnT_3_R;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Sutki_AColumn {
                get {
                    return this.columnSutki_A;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Sutki_RColumn {
                get {
                    return this.columnSutki_R;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Narast_AColumn {
                get {
                    return this.columnNarast_A;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Narast_RColumn {
                get {
                    return this.columnNarast_R;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Max_AColumn {
                get {
                    return this.columnMax_A;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Max_RColumn {
                get {
                    return this.columnMax_R;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DayEnRow this[int index] {
                get {
                    return ((DayEnRow)(this.Rows[index]));
                }
            }
            
            public event DayEnRowChangeEventHandler DayEnRowChanging;
            
            public event DayEnRowChangeEventHandler DayEnRowChanged;
            
            public event DayEnRowChangeEventHandler DayEnRowDeleting;
            
            public event DayEnRowChangeEventHandler DayEnRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDayEnRow(DayEnRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DayEnRow AddDayEnRow(int Number, string Data_s, int T_1_A, int T_2_A, int T_3_A, int T_1_R, int T_2_R, int T_3_R, int Sutki_A, int Sutki_R, int Narast_A, int Narast_R, int Max_A, int Max_R) {
                DayEnRow rowDayEnRow = ((DayEnRow)(this.NewRow()));
                rowDayEnRow.ItemArray = new object[] {
                        Number,
                        Data_s,
                        T_1_A,
                        T_2_A,
                        T_3_A,
                        T_1_R,
                        T_2_R,
                        T_3_R,
                        Sutki_A,
                        Sutki_R,
                        Narast_A,
                        Narast_R,
                        Max_A,
                        Max_R};
                this.Rows.Add(rowDayEnRow);
                return rowDayEnRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DayEnDataTable cln = ((DayEnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DayEnDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnData_s = base.Columns["Data_s"];
                this.columnT_1_A = base.Columns["T_1_A"];
                this.columnT_2_A = base.Columns["T_2_A"];
                this.columnT_3_A = base.Columns["T_3_A"];
                this.columnT_1_R = base.Columns["T_1_R"];
                this.columnT_2_R = base.Columns["T_2_R"];
                this.columnT_3_R = base.Columns["T_3_R"];
                this.columnSutki_A = base.Columns["Sutki_A"];
                this.columnSutki_R = base.Columns["Sutki_R"];
                this.columnNarast_A = base.Columns["Narast_A"];
                this.columnNarast_R = base.Columns["Narast_R"];
                this.columnMax_A = base.Columns["Max_A"];
                this.columnMax_R = base.Columns["Max_R"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnData_s = new System.Data.DataColumn("Data_s", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnData_s);
                this.columnT_1_A = new System.Data.DataColumn("T_1_A", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_1_A);
                this.columnT_2_A = new System.Data.DataColumn("T_2_A", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_2_A);
                this.columnT_3_A = new System.Data.DataColumn("T_3_A", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_3_A);
                this.columnT_1_R = new System.Data.DataColumn("T_1_R", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_1_R);
                this.columnT_2_R = new System.Data.DataColumn("T_2_R", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_2_R);
                this.columnT_3_R = new System.Data.DataColumn("T_3_R", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_3_R);
                this.columnSutki_A = new System.Data.DataColumn("Sutki_A", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSutki_A);
                this.columnSutki_R = new System.Data.DataColumn("Sutki_R", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSutki_R);
                this.columnNarast_A = new System.Data.DataColumn("Narast_A", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNarast_A);
                this.columnNarast_R = new System.Data.DataColumn("Narast_R", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNarast_R);
                this.columnMax_A = new System.Data.DataColumn("Max_A", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax_A);
                this.columnMax_R = new System.Data.DataColumn("Max_R", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax_R);
                this.columnData_s.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DayEnRow NewDayEnRow() {
                return ((DayEnRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DayEnRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DayEnRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DayEnRowChanged != null)) {
                    this.DayEnRowChanged(this, new DayEnRowChangeEvent(((DayEnRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DayEnRowChanging != null)) {
                    this.DayEnRowChanging(this, new DayEnRowChangeEvent(((DayEnRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DayEnRowDeleted != null)) {
                    this.DayEnRowDeleted(this, new DayEnRowChangeEvent(((DayEnRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DayEnRowDeleting != null)) {
                    this.DayEnRowDeleting(this, new DayEnRowChangeEvent(((DayEnRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDayEnRow(DayEnRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DayEnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EnergyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDataIn;
            
            private System.Data.DataColumn columnE1;
            
            private System.Data.DataColumn columnE2;
            
            private System.Data.DataColumn columnE3;
            
            private System.Data.DataColumn columnE4;
            
            private System.Data.DataColumn columnE5;
            
            private System.Data.DataColumn columnE6;
            
            private System.Data.DataColumn columnE7;
            
            private System.Data.DataColumn columnE8;
            
            private System.Data.DataColumn columnE9;
            
            private System.Data.DataColumn columnE10;
            
            private System.Data.DataColumn columnE11;
            
            private System.Data.DataColumn columnE12;
            
            private System.Data.DataColumn columnE13;
            
            private System.Data.DataColumn columnE14;
            
            private System.Data.DataColumn columnE15;
            
            private System.Data.DataColumn columnE16;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnergyDataTable() {
                this.TableName = "Energy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnergyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EnergyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataInColumn {
                get {
                    return this.columnDataIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E1Column {
                get {
                    return this.columnE1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E2Column {
                get {
                    return this.columnE2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E3Column {
                get {
                    return this.columnE3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E4Column {
                get {
                    return this.columnE4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E5Column {
                get {
                    return this.columnE5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E6Column {
                get {
                    return this.columnE6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E7Column {
                get {
                    return this.columnE7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E8Column {
                get {
                    return this.columnE8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E9Column {
                get {
                    return this.columnE9;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E10Column {
                get {
                    return this.columnE10;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E11Column {
                get {
                    return this.columnE11;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E12Column {
                get {
                    return this.columnE12;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E13Column {
                get {
                    return this.columnE13;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E14Column {
                get {
                    return this.columnE14;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E15Column {
                get {
                    return this.columnE15;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn E16Column {
                get {
                    return this.columnE16;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnergyRow this[int index] {
                get {
                    return ((EnergyRow)(this.Rows[index]));
                }
            }
            
            public event EnergyRowChangeEventHandler EnergyRowChanging;
            
            public event EnergyRowChangeEventHandler EnergyRowChanged;
            
            public event EnergyRowChangeEventHandler EnergyRowDeleting;
            
            public event EnergyRowChangeEventHandler EnergyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnergyRow(EnergyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnergyRow AddEnergyRow(
                        System.DateTime DataIn, 
                        double E1, 
                        double E2, 
                        double E3, 
                        double E4, 
                        double E5, 
                        double E6, 
                        double E7, 
                        double E8, 
                        double E9, 
                        double E10, 
                        double E11, 
                        double E12, 
                        double E13, 
                        double E14, 
                        double E15, 
                        double E16) {
                EnergyRow rowEnergyRow = ((EnergyRow)(this.NewRow()));
                rowEnergyRow.ItemArray = new object[] {
                        DataIn,
                        E1,
                        E2,
                        E3,
                        E4,
                        E5,
                        E6,
                        E7,
                        E8,
                        E9,
                        E10,
                        E11,
                        E12,
                        E13,
                        E14,
                        E15,
                        E16};
                this.Rows.Add(rowEnergyRow);
                return rowEnergyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EnergyDataTable cln = ((EnergyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EnergyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataIn = base.Columns["DataIn"];
                this.columnE1 = base.Columns["E1"];
                this.columnE2 = base.Columns["E2"];
                this.columnE3 = base.Columns["E3"];
                this.columnE4 = base.Columns["E4"];
                this.columnE5 = base.Columns["E5"];
                this.columnE6 = base.Columns["E6"];
                this.columnE7 = base.Columns["E7"];
                this.columnE8 = base.Columns["E8"];
                this.columnE9 = base.Columns["E9"];
                this.columnE10 = base.Columns["E10"];
                this.columnE11 = base.Columns["E11"];
                this.columnE12 = base.Columns["E12"];
                this.columnE13 = base.Columns["E13"];
                this.columnE14 = base.Columns["E14"];
                this.columnE15 = base.Columns["E15"];
                this.columnE16 = base.Columns["E16"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataIn = new System.Data.DataColumn("DataIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataIn);
                this.columnE1 = new System.Data.DataColumn("E1", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE1);
                this.columnE2 = new System.Data.DataColumn("E2", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE2);
                this.columnE3 = new System.Data.DataColumn("E3", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE3);
                this.columnE4 = new System.Data.DataColumn("E4", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE4);
                this.columnE5 = new System.Data.DataColumn("E5", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE5);
                this.columnE6 = new System.Data.DataColumn("E6", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE6);
                this.columnE7 = new System.Data.DataColumn("E7", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE7);
                this.columnE8 = new System.Data.DataColumn("E8", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE8);
                this.columnE9 = new System.Data.DataColumn("E9", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE9);
                this.columnE10 = new System.Data.DataColumn("E10", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE10);
                this.columnE11 = new System.Data.DataColumn("E11", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE11);
                this.columnE12 = new System.Data.DataColumn("E12", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE12);
                this.columnE13 = new System.Data.DataColumn("E13", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE13);
                this.columnE14 = new System.Data.DataColumn("E14", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE14);
                this.columnE15 = new System.Data.DataColumn("E15", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE15);
                this.columnE16 = new System.Data.DataColumn("E16", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnE16);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnergyRow NewEnergyRow() {
                return ((EnergyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EnergyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EnergyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnergyRowChanged != null)) {
                    this.EnergyRowChanged(this, new EnergyRowChangeEvent(((EnergyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnergyRowChanging != null)) {
                    this.EnergyRowChanging(this, new EnergyRowChangeEvent(((EnergyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnergyRowDeleted != null)) {
                    this.EnergyRowDeleted(this, new EnergyRowChangeEvent(((EnergyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnergyRowDeleting != null)) {
                    this.EnergyRowDeleting(this, new EnergyRowChangeEvent(((EnergyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnergyRow(EnergyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EnergyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Energy30DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDataIn;
            
            private System.Data.DataColumn columnTimeIn;
            
            private System.Data.DataColumn columnI1;
            
            private System.Data.DataColumn columnI2;
            
            private System.Data.DataColumn columnI3;
            
            private System.Data.DataColumn columnI4;
            
            private System.Data.DataColumn columnI5;
            
            private System.Data.DataColumn columnI6;
            
            private System.Data.DataColumn columnI7;
            
            private System.Data.DataColumn columnI8;
            
            private System.Data.DataColumn columnI9;
            
            private System.Data.DataColumn columnI10;
            
            private System.Data.DataColumn columnI11;
            
            private System.Data.DataColumn columnI12;
            
            private System.Data.DataColumn columnI13;
            
            private System.Data.DataColumn columnI14;
            
            private System.Data.DataColumn columnI15;
            
            private System.Data.DataColumn columnI16;
            
            private System.Data.DataColumn columnI17;
            
            private System.Data.DataColumn columnI18;
            
            private System.Data.DataColumn columnI19;
            
            private System.Data.DataColumn columnI20;
            
            private System.Data.DataColumn columnI21;
            
            private System.Data.DataColumn columnI22;
            
            private System.Data.DataColumn columnI23;
            
            private System.Data.DataColumn columnI24;
            
            private System.Data.DataColumn columnI25;
            
            private System.Data.DataColumn columnI26;
            
            private System.Data.DataColumn columnI27;
            
            private System.Data.DataColumn columnI28;
            
            private System.Data.DataColumn columnI29;
            
            private System.Data.DataColumn columnI30;
            
            private System.Data.DataColumn columnI31;
            
            private System.Data.DataColumn columnI32;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Energy30DataTable() {
                this.TableName = "Energy30";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Energy30DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Energy30DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataInColumn {
                get {
                    return this.columnDataIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeInColumn {
                get {
                    return this.columnTimeIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I1Column {
                get {
                    return this.columnI1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I2Column {
                get {
                    return this.columnI2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I3Column {
                get {
                    return this.columnI3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I4Column {
                get {
                    return this.columnI4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I5Column {
                get {
                    return this.columnI5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I6Column {
                get {
                    return this.columnI6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I7Column {
                get {
                    return this.columnI7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I8Column {
                get {
                    return this.columnI8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I9Column {
                get {
                    return this.columnI9;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I10Column {
                get {
                    return this.columnI10;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I11Column {
                get {
                    return this.columnI11;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I12Column {
                get {
                    return this.columnI12;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I13Column {
                get {
                    return this.columnI13;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I14Column {
                get {
                    return this.columnI14;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I15Column {
                get {
                    return this.columnI15;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I16Column {
                get {
                    return this.columnI16;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I17Column {
                get {
                    return this.columnI17;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I18Column {
                get {
                    return this.columnI18;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I19Column {
                get {
                    return this.columnI19;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I20Column {
                get {
                    return this.columnI20;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I21Column {
                get {
                    return this.columnI21;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I22Column {
                get {
                    return this.columnI22;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I23Column {
                get {
                    return this.columnI23;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I24Column {
                get {
                    return this.columnI24;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I25Column {
                get {
                    return this.columnI25;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I26Column {
                get {
                    return this.columnI26;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I27Column {
                get {
                    return this.columnI27;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I28Column {
                get {
                    return this.columnI28;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I29Column {
                get {
                    return this.columnI29;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I30Column {
                get {
                    return this.columnI30;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I31Column {
                get {
                    return this.columnI31;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn I32Column {
                get {
                    return this.columnI32;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Energy30Row this[int index] {
                get {
                    return ((Energy30Row)(this.Rows[index]));
                }
            }
            
            public event Energy30RowChangeEventHandler Energy30RowChanging;
            
            public event Energy30RowChangeEventHandler Energy30RowChanged;
            
            public event Energy30RowChangeEventHandler Energy30RowDeleting;
            
            public event Energy30RowChangeEventHandler Energy30RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnergy30Row(Energy30Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Energy30Row AddEnergy30Row(
                        System.DateTime DataIn, 
                        System.DateTime TimeIn, 
                        double I1, 
                        double I2, 
                        double I3, 
                        double I4, 
                        double I5, 
                        double I6, 
                        double I7, 
                        double I8, 
                        double I9, 
                        double I10, 
                        double I11, 
                        double I12, 
                        double I13, 
                        double I14, 
                        double I15, 
                        double I16, 
                        double I17, 
                        double I18, 
                        double I19, 
                        double I20, 
                        double I21, 
                        double I22, 
                        double I23, 
                        double I24, 
                        double I25, 
                        double I26, 
                        double I27, 
                        double I28, 
                        double I29, 
                        double I30, 
                        double I31, 
                        double I32) {
                Energy30Row rowEnergy30Row = ((Energy30Row)(this.NewRow()));
                rowEnergy30Row.ItemArray = new object[] {
                        DataIn,
                        TimeIn,
                        I1,
                        I2,
                        I3,
                        I4,
                        I5,
                        I6,
                        I7,
                        I8,
                        I9,
                        I10,
                        I11,
                        I12,
                        I13,
                        I14,
                        I15,
                        I16,
                        I17,
                        I18,
                        I19,
                        I20,
                        I21,
                        I22,
                        I23,
                        I24,
                        I25,
                        I26,
                        I27,
                        I28,
                        I29,
                        I30,
                        I31,
                        I32};
                this.Rows.Add(rowEnergy30Row);
                return rowEnergy30Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Energy30DataTable cln = ((Energy30DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Energy30DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataIn = base.Columns["DataIn"];
                this.columnTimeIn = base.Columns["TimeIn"];
                this.columnI1 = base.Columns["I1"];
                this.columnI2 = base.Columns["I2"];
                this.columnI3 = base.Columns["I3"];
                this.columnI4 = base.Columns["I4"];
                this.columnI5 = base.Columns["I5"];
                this.columnI6 = base.Columns["I6"];
                this.columnI7 = base.Columns["I7"];
                this.columnI8 = base.Columns["I8"];
                this.columnI9 = base.Columns["I9"];
                this.columnI10 = base.Columns["I10"];
                this.columnI11 = base.Columns["I11"];
                this.columnI12 = base.Columns["I12"];
                this.columnI13 = base.Columns["I13"];
                this.columnI14 = base.Columns["I14"];
                this.columnI15 = base.Columns["I15"];
                this.columnI16 = base.Columns["I16"];
                this.columnI17 = base.Columns["I17"];
                this.columnI18 = base.Columns["I18"];
                this.columnI19 = base.Columns["I19"];
                this.columnI20 = base.Columns["I20"];
                this.columnI21 = base.Columns["I21"];
                this.columnI22 = base.Columns["I22"];
                this.columnI23 = base.Columns["I23"];
                this.columnI24 = base.Columns["I24"];
                this.columnI25 = base.Columns["I25"];
                this.columnI26 = base.Columns["I26"];
                this.columnI27 = base.Columns["I27"];
                this.columnI28 = base.Columns["I28"];
                this.columnI29 = base.Columns["I29"];
                this.columnI30 = base.Columns["I30"];
                this.columnI31 = base.Columns["I31"];
                this.columnI32 = base.Columns["I32"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataIn = new System.Data.DataColumn("DataIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataIn);
                this.columnTimeIn = new System.Data.DataColumn("TimeIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeIn);
                this.columnI1 = new System.Data.DataColumn("I1", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI1);
                this.columnI2 = new System.Data.DataColumn("I2", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI2);
                this.columnI3 = new System.Data.DataColumn("I3", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI3);
                this.columnI4 = new System.Data.DataColumn("I4", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI4);
                this.columnI5 = new System.Data.DataColumn("I5", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI5);
                this.columnI6 = new System.Data.DataColumn("I6", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI6);
                this.columnI7 = new System.Data.DataColumn("I7", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI7);
                this.columnI8 = new System.Data.DataColumn("I8", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI8);
                this.columnI9 = new System.Data.DataColumn("I9", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI9);
                this.columnI10 = new System.Data.DataColumn("I10", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI10);
                this.columnI11 = new System.Data.DataColumn("I11", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI11);
                this.columnI12 = new System.Data.DataColumn("I12", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI12);
                this.columnI13 = new System.Data.DataColumn("I13", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI13);
                this.columnI14 = new System.Data.DataColumn("I14", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI14);
                this.columnI15 = new System.Data.DataColumn("I15", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI15);
                this.columnI16 = new System.Data.DataColumn("I16", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI16);
                this.columnI17 = new System.Data.DataColumn("I17", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI17);
                this.columnI18 = new System.Data.DataColumn("I18", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI18);
                this.columnI19 = new System.Data.DataColumn("I19", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI19);
                this.columnI20 = new System.Data.DataColumn("I20", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI20);
                this.columnI21 = new System.Data.DataColumn("I21", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI21);
                this.columnI22 = new System.Data.DataColumn("I22", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI22);
                this.columnI23 = new System.Data.DataColumn("I23", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI23);
                this.columnI24 = new System.Data.DataColumn("I24", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI24);
                this.columnI25 = new System.Data.DataColumn("I25", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI25);
                this.columnI26 = new System.Data.DataColumn("I26", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI26);
                this.columnI27 = new System.Data.DataColumn("I27", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI27);
                this.columnI28 = new System.Data.DataColumn("I28", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI28);
                this.columnI29 = new System.Data.DataColumn("I29", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI29);
                this.columnI30 = new System.Data.DataColumn("I30", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI30);
                this.columnI31 = new System.Data.DataColumn("I31", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI31);
                this.columnI32 = new System.Data.DataColumn("I32", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnI32);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Energy30Row NewEnergy30Row() {
                return ((Energy30Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Energy30Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Energy30Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Energy30RowChanged != null)) {
                    this.Energy30RowChanged(this, new Energy30RowChangeEvent(((Energy30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Energy30RowChanging != null)) {
                    this.Energy30RowChanging(this, new Energy30RowChangeEvent(((Energy30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Energy30RowDeleted != null)) {
                    this.Energy30RowDeleted(this, new Energy30RowChangeEvent(((Energy30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Energy30RowDeleting != null)) {
                    this.Energy30RowDeleting(this, new Energy30RowChangeEvent(((Energy30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnergy30Row(Energy30Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Energy30DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FamilyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnКод;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnFamily;
            
            private System.Data.DataColumn columnPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDataTable() {
                this.TableName = "Family";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamilyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FamilyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn КодColumn {
                get {
                    return this.columnКод;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FamilyColumn {
                get {
                    return this.columnFamily;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyRow this[int index] {
                get {
                    return ((FamilyRow)(this.Rows[index]));
                }
            }
            
            public event FamilyRowChangeEventHandler FamilyRowChanging;
            
            public event FamilyRowChangeEventHandler FamilyRowChanged;
            
            public event FamilyRowChangeEventHandler FamilyRowDeleting;
            
            public event FamilyRowChangeEventHandler FamilyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFamilyRow(FamilyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyRow AddFamilyRow(int ID, string Family, string Password) {
                FamilyRow rowFamilyRow = ((FamilyRow)(this.NewRow()));
                rowFamilyRow.ItemArray = new object[] {
                        null,
                        ID,
                        Family,
                        Password};
                this.Rows.Add(rowFamilyRow);
                return rowFamilyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyRow FindByКод(int Код) {
                return ((FamilyRow)(this.Rows.Find(new object[] {
                            Код})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FamilyDataTable cln = ((FamilyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FamilyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnКод = base.Columns["Код"];
                this.columnID = base.Columns["ID"];
                this.columnFamily = base.Columns["Family"];
                this.columnPassword = base.Columns["Password"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnКод = new System.Data.DataColumn("Код", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод);
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFamily = new System.Data.DataColumn("Family", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnКод}, true));
                this.columnКод.AutoIncrement = true;
                this.columnКод.AllowDBNull = false;
                this.columnКод.Unique = true;
                this.columnFamily.MaxLength = 50;
                this.columnPassword.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyRow NewFamilyRow() {
                return ((FamilyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FamilyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FamilyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FamilyRowChanged != null)) {
                    this.FamilyRowChanged(this, new FamilyRowChangeEvent(((FamilyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FamilyRowChanging != null)) {
                    this.FamilyRowChanging(this, new FamilyRowChangeEvent(((FamilyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FamilyRowDeleted != null)) {
                    this.FamilyRowDeleted(this, new FamilyRowChangeEvent(((FamilyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FamilyRowDeleting != null)) {
                    this.FamilyRowDeleting(this, new FamilyRowChangeEvent(((FamilyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFamilyRow(FamilyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FamilyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Power3DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDataIn;
            
            private System.Data.DataColumn columnTimeIn;
            
            private System.Data.DataColumn columnPower3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power3DataTable() {
                this.TableName = "Power3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Power3DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Power3DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataInColumn {
                get {
                    return this.columnDataIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeInColumn {
                get {
                    return this.columnTimeIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Power3Column {
                get {
                    return this.columnPower3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power3Row this[int index] {
                get {
                    return ((Power3Row)(this.Rows[index]));
                }
            }
            
            public event Power3RowChangeEventHandler Power3RowChanging;
            
            public event Power3RowChangeEventHandler Power3RowChanged;
            
            public event Power3RowChangeEventHandler Power3RowDeleting;
            
            public event Power3RowChangeEventHandler Power3RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPower3Row(Power3Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power3Row AddPower3Row(System.DateTime DataIn, System.DateTime TimeIn, double Power3) {
                Power3Row rowPower3Row = ((Power3Row)(this.NewRow()));
                rowPower3Row.ItemArray = new object[] {
                        DataIn,
                        TimeIn,
                        Power3};
                this.Rows.Add(rowPower3Row);
                return rowPower3Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Power3DataTable cln = ((Power3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Power3DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataIn = base.Columns["DataIn"];
                this.columnTimeIn = base.Columns["TimeIn"];
                this.columnPower3 = base.Columns["Power3"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataIn = new System.Data.DataColumn("DataIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataIn);
                this.columnTimeIn = new System.Data.DataColumn("TimeIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeIn);
                this.columnPower3 = new System.Data.DataColumn("Power3", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPower3);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power3Row NewPower3Row() {
                return ((Power3Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Power3Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Power3Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Power3RowChanged != null)) {
                    this.Power3RowChanged(this, new Power3RowChangeEvent(((Power3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Power3RowChanging != null)) {
                    this.Power3RowChanging(this, new Power3RowChangeEvent(((Power3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Power3RowDeleted != null)) {
                    this.Power3RowDeleted(this, new Power3RowChangeEvent(((Power3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Power3RowDeleting != null)) {
                    this.Power3RowDeleting(this, new Power3RowChangeEvent(((Power3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePower3Row(Power3Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Power3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Power30DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDataIn;
            
            private System.Data.DataColumn columnTimeIn;
            
            private System.Data.DataColumn columnP1;
            
            private System.Data.DataColumn columnP2;
            
            private System.Data.DataColumn columnP3;
            
            private System.Data.DataColumn columnP4;
            
            private System.Data.DataColumn columnP5;
            
            private System.Data.DataColumn columnP6;
            
            private System.Data.DataColumn columnP7;
            
            private System.Data.DataColumn columnP8;
            
            private System.Data.DataColumn columnP9;
            
            private System.Data.DataColumn columnP10;
            
            private System.Data.DataColumn columnP11;
            
            private System.Data.DataColumn columnP12;
            
            private System.Data.DataColumn columnP13;
            
            private System.Data.DataColumn columnP14;
            
            private System.Data.DataColumn columnP15;
            
            private System.Data.DataColumn columnP16;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power30DataTable() {
                this.TableName = "Power30";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Power30DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Power30DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataInColumn {
                get {
                    return this.columnDataIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeInColumn {
                get {
                    return this.columnTimeIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P1Column {
                get {
                    return this.columnP1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P2Column {
                get {
                    return this.columnP2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P3Column {
                get {
                    return this.columnP3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P4Column {
                get {
                    return this.columnP4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P5Column {
                get {
                    return this.columnP5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P6Column {
                get {
                    return this.columnP6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P7Column {
                get {
                    return this.columnP7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P8Column {
                get {
                    return this.columnP8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P9Column {
                get {
                    return this.columnP9;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P10Column {
                get {
                    return this.columnP10;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P11Column {
                get {
                    return this.columnP11;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P12Column {
                get {
                    return this.columnP12;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P13Column {
                get {
                    return this.columnP13;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P14Column {
                get {
                    return this.columnP14;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P15Column {
                get {
                    return this.columnP15;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn P16Column {
                get {
                    return this.columnP16;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power30Row this[int index] {
                get {
                    return ((Power30Row)(this.Rows[index]));
                }
            }
            
            public event Power30RowChangeEventHandler Power30RowChanging;
            
            public event Power30RowChangeEventHandler Power30RowChanged;
            
            public event Power30RowChangeEventHandler Power30RowDeleting;
            
            public event Power30RowChangeEventHandler Power30RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPower30Row(Power30Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power30Row AddPower30Row(
                        System.DateTime DataIn, 
                        System.DateTime TimeIn, 
                        double P1, 
                        double P2, 
                        double P3, 
                        double P4, 
                        double P5, 
                        double P6, 
                        double P7, 
                        double P8, 
                        double P9, 
                        double P10, 
                        double P11, 
                        double P12, 
                        double P13, 
                        double P14, 
                        double P15, 
                        double P16) {
                Power30Row rowPower30Row = ((Power30Row)(this.NewRow()));
                rowPower30Row.ItemArray = new object[] {
                        DataIn,
                        TimeIn,
                        P1,
                        P2,
                        P3,
                        P4,
                        P5,
                        P6,
                        P7,
                        P8,
                        P9,
                        P10,
                        P11,
                        P12,
                        P13,
                        P14,
                        P15,
                        P16};
                this.Rows.Add(rowPower30Row);
                return rowPower30Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Power30DataTable cln = ((Power30DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Power30DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataIn = base.Columns["DataIn"];
                this.columnTimeIn = base.Columns["TimeIn"];
                this.columnP1 = base.Columns["P1"];
                this.columnP2 = base.Columns["P2"];
                this.columnP3 = base.Columns["P3"];
                this.columnP4 = base.Columns["P4"];
                this.columnP5 = base.Columns["P5"];
                this.columnP6 = base.Columns["P6"];
                this.columnP7 = base.Columns["P7"];
                this.columnP8 = base.Columns["P8"];
                this.columnP9 = base.Columns["P9"];
                this.columnP10 = base.Columns["P10"];
                this.columnP11 = base.Columns["P11"];
                this.columnP12 = base.Columns["P12"];
                this.columnP13 = base.Columns["P13"];
                this.columnP14 = base.Columns["P14"];
                this.columnP15 = base.Columns["P15"];
                this.columnP16 = base.Columns["P16"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataIn = new System.Data.DataColumn("DataIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataIn);
                this.columnTimeIn = new System.Data.DataColumn("TimeIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeIn);
                this.columnP1 = new System.Data.DataColumn("P1", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1);
                this.columnP2 = new System.Data.DataColumn("P2", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP2);
                this.columnP3 = new System.Data.DataColumn("P3", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP3);
                this.columnP4 = new System.Data.DataColumn("P4", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP4);
                this.columnP5 = new System.Data.DataColumn("P5", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP5);
                this.columnP6 = new System.Data.DataColumn("P6", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP6);
                this.columnP7 = new System.Data.DataColumn("P7", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP7);
                this.columnP8 = new System.Data.DataColumn("P8", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP8);
                this.columnP9 = new System.Data.DataColumn("P9", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP9);
                this.columnP10 = new System.Data.DataColumn("P10", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP10);
                this.columnP11 = new System.Data.DataColumn("P11", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP11);
                this.columnP12 = new System.Data.DataColumn("P12", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP12);
                this.columnP13 = new System.Data.DataColumn("P13", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP13);
                this.columnP14 = new System.Data.DataColumn("P14", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP14);
                this.columnP15 = new System.Data.DataColumn("P15", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP15);
                this.columnP16 = new System.Data.DataColumn("P16", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnP16);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power30Row NewPower30Row() {
                return ((Power30Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Power30Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Power30Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Power30RowChanged != null)) {
                    this.Power30RowChanged(this, new Power30RowChangeEvent(((Power30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Power30RowChanging != null)) {
                    this.Power30RowChanging(this, new Power30RowChangeEvent(((Power30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Power30RowDeleted != null)) {
                    this.Power30RowDeleted(this, new Power30RowChangeEvent(((Power30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Power30RowDeleting != null)) {
                    this.Power30RowDeleting(this, new Power30RowChangeEvent(((Power30Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePower30Row(Power30Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Power30DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchetchikDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDataIn;
            
            private System.Data.DataColumn columns1;
            
            private System.Data.DataColumn columns2;
            
            private System.Data.DataColumn columns3;
            
            private System.Data.DataColumn columns4;
            
            private System.Data.DataColumn columns5;
            
            private System.Data.DataColumn columns6;
            
            private System.Data.DataColumn columns7;
            
            private System.Data.DataColumn columns8;
            
            private System.Data.DataColumn columns9;
            
            private System.Data.DataColumn columns10;
            
            private System.Data.DataColumn columns11;
            
            private System.Data.DataColumn columns12;
            
            private System.Data.DataColumn columns13;
            
            private System.Data.DataColumn columns14;
            
            private System.Data.DataColumn columns15;
            
            private System.Data.DataColumn columns16;
            
            private System.Data.DataColumn columns17;
            
            private System.Data.DataColumn columns18;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchetchikDataTable() {
                this.TableName = "Schetchik";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchetchikDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchetchikDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataInColumn {
                get {
                    return this.columnDataIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s1Column {
                get {
                    return this.columns1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s2Column {
                get {
                    return this.columns2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s3Column {
                get {
                    return this.columns3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s4Column {
                get {
                    return this.columns4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s5Column {
                get {
                    return this.columns5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s6Column {
                get {
                    return this.columns6;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s7Column {
                get {
                    return this.columns7;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s8Column {
                get {
                    return this.columns8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s9Column {
                get {
                    return this.columns9;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s10Column {
                get {
                    return this.columns10;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s11Column {
                get {
                    return this.columns11;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s12Column {
                get {
                    return this.columns12;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s13Column {
                get {
                    return this.columns13;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s14Column {
                get {
                    return this.columns14;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s15Column {
                get {
                    return this.columns15;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s16Column {
                get {
                    return this.columns16;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s17Column {
                get {
                    return this.columns17;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn s18Column {
                get {
                    return this.columns18;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchetchikRow this[int index] {
                get {
                    return ((SchetchikRow)(this.Rows[index]));
                }
            }
            
            public event SchetchikRowChangeEventHandler SchetchikRowChanging;
            
            public event SchetchikRowChangeEventHandler SchetchikRowChanged;
            
            public event SchetchikRowChangeEventHandler SchetchikRowDeleting;
            
            public event SchetchikRowChangeEventHandler SchetchikRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchetchikRow(SchetchikRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchetchikRow AddSchetchikRow(
                        System.DateTime DataIn, 
                        double s1, 
                        double s2, 
                        double s3, 
                        double s4, 
                        double s5, 
                        double s6, 
                        double s7, 
                        double s8, 
                        double s9, 
                        double s10, 
                        double s11, 
                        double s12, 
                        double s13, 
                        double s14, 
                        double s15, 
                        double s16, 
                        double s17, 
                        double s18) {
                SchetchikRow rowSchetchikRow = ((SchetchikRow)(this.NewRow()));
                rowSchetchikRow.ItemArray = new object[] {
                        DataIn,
                        s1,
                        s2,
                        s3,
                        s4,
                        s5,
                        s6,
                        s7,
                        s8,
                        s9,
                        s10,
                        s11,
                        s12,
                        s13,
                        s14,
                        s15,
                        s16,
                        s17,
                        s18};
                this.Rows.Add(rowSchetchikRow);
                return rowSchetchikRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchetchikDataTable cln = ((SchetchikDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchetchikDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataIn = base.Columns["DataIn"];
                this.columns1 = base.Columns["s1"];
                this.columns2 = base.Columns["s2"];
                this.columns3 = base.Columns["s3"];
                this.columns4 = base.Columns["s4"];
                this.columns5 = base.Columns["s5"];
                this.columns6 = base.Columns["s6"];
                this.columns7 = base.Columns["s7"];
                this.columns8 = base.Columns["s8"];
                this.columns9 = base.Columns["s9"];
                this.columns10 = base.Columns["s10"];
                this.columns11 = base.Columns["s11"];
                this.columns12 = base.Columns["s12"];
                this.columns13 = base.Columns["s13"];
                this.columns14 = base.Columns["s14"];
                this.columns15 = base.Columns["s15"];
                this.columns16 = base.Columns["s16"];
                this.columns17 = base.Columns["s17"];
                this.columns18 = base.Columns["s18"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataIn = new System.Data.DataColumn("DataIn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataIn);
                this.columns1 = new System.Data.DataColumn("s1", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns1);
                this.columns2 = new System.Data.DataColumn("s2", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns2);
                this.columns3 = new System.Data.DataColumn("s3", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns3);
                this.columns4 = new System.Data.DataColumn("s4", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns4);
                this.columns5 = new System.Data.DataColumn("s5", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns5);
                this.columns6 = new System.Data.DataColumn("s6", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns6);
                this.columns7 = new System.Data.DataColumn("s7", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns7);
                this.columns8 = new System.Data.DataColumn("s8", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns8);
                this.columns9 = new System.Data.DataColumn("s9", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns9);
                this.columns10 = new System.Data.DataColumn("s10", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns10);
                this.columns11 = new System.Data.DataColumn("s11", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns11);
                this.columns12 = new System.Data.DataColumn("s12", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns12);
                this.columns13 = new System.Data.DataColumn("s13", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns13);
                this.columns14 = new System.Data.DataColumn("s14", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns14);
                this.columns15 = new System.Data.DataColumn("s15", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns15);
                this.columns16 = new System.Data.DataColumn("s16", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns16);
                this.columns17 = new System.Data.DataColumn("s17", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns17);
                this.columns18 = new System.Data.DataColumn("s18", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columns18);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchetchikRow NewSchetchikRow() {
                return ((SchetchikRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchetchikRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchetchikRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchetchikRowChanged != null)) {
                    this.SchetchikRowChanged(this, new SchetchikRowChangeEvent(((SchetchikRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchetchikRowChanging != null)) {
                    this.SchetchikRowChanging(this, new SchetchikRowChangeEvent(((SchetchikRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchetchikRowDeleted != null)) {
                    this.SchetchikRowDeleted(this, new SchetchikRowChangeEvent(((SchetchikRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchetchikRowDeleting != null)) {
                    this.SchetchikRowDeleting(this, new SchetchikRowChangeEvent(((SchetchikRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchetchikRow(SchetchikRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchetchikDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tttDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnttt1;
            
            private System.Data.DataColumn columnttt2;
            
            private System.Data.DataColumn columnttt3;
            
            private System.Data.DataColumn columnttt4;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tttDataTable() {
                this.TableName = "ttt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tttDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tttDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ttt1Column {
                get {
                    return this.columnttt1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ttt2Column {
                get {
                    return this.columnttt2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ttt3Column {
                get {
                    return this.columnttt3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ttt4Column {
                get {
                    return this.columnttt4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tttRow this[int index] {
                get {
                    return ((tttRow)(this.Rows[index]));
                }
            }
            
            public event tttRowChangeEventHandler tttRowChanging;
            
            public event tttRowChangeEventHandler tttRowChanged;
            
            public event tttRowChangeEventHandler tttRowDeleting;
            
            public event tttRowChangeEventHandler tttRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtttRow(tttRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tttRow AddtttRow(string ttt1, int ttt2, System.DateTime ttt3, System.DateTime ttt4) {
                tttRow rowtttRow = ((tttRow)(this.NewRow()));
                rowtttRow.ItemArray = new object[] {
                        ttt1,
                        ttt2,
                        ttt3,
                        ttt4};
                this.Rows.Add(rowtttRow);
                return rowtttRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tttDataTable cln = ((tttDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tttDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnttt1 = base.Columns["ttt1"];
                this.columnttt2 = base.Columns["ttt2"];
                this.columnttt3 = base.Columns["ttt3"];
                this.columnttt4 = base.Columns["ttt4"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnttt1 = new System.Data.DataColumn("ttt1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnttt1);
                this.columnttt2 = new System.Data.DataColumn("ttt2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnttt2);
                this.columnttt3 = new System.Data.DataColumn("ttt3", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnttt3);
                this.columnttt4 = new System.Data.DataColumn("ttt4", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnttt4);
                this.columnttt1.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tttRow NewtttRow() {
                return ((tttRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tttRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tttRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tttRowChanged != null)) {
                    this.tttRowChanged(this, new tttRowChangeEvent(((tttRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tttRowChanging != null)) {
                    this.tttRowChanging(this, new tttRowChangeEvent(((tttRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tttRowDeleted != null)) {
                    this.tttRowDeleted(this, new tttRowChangeEvent(((tttRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tttRowDeleting != null)) {
                    this.tttRowDeleting(this, new tttRowChangeEvent(((tttRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetttRow(tttRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dbaseDataSet ds = new dbaseDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tttDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DayEnRow : System.Data.DataRow {
            
            private DayEnDataTable tableDayEn;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DayEnRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDayEn = ((DayEnDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Number\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data_s {
                get {
                    try {
                        return ((string)(this[this.tableDayEn.Data_sColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Data_s\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Data_sColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_1_A {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.T_1_AColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'T_1_A\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.T_1_AColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_2_A {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.T_2_AColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'T_2_A\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.T_2_AColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_3_A {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.T_3_AColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'T_3_A\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.T_3_AColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_1_R {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.T_1_RColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'T_1_R\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.T_1_RColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_2_R {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.T_2_RColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'T_2_R\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.T_2_RColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_3_R {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.T_3_RColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'T_3_R\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.T_3_RColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sutki_A {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.Sutki_AColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Sutki_A\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Sutki_AColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sutki_R {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.Sutki_RColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Sutki_R\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Sutki_RColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Narast_A {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.Narast_AColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Narast_A\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Narast_AColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Narast_R {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.Narast_RColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Narast_R\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Narast_RColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Max_A {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.Max_AColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Max_A\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Max_AColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Max_R {
                get {
                    try {
                        return ((int)(this[this.tableDayEn.Max_RColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Max_R\' in table \'DayEn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDayEn.Max_RColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableDayEn.NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableDayEn.NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsData_sNull() {
                return this.IsNull(this.tableDayEn.Data_sColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetData_sNull() {
                this[this.tableDayEn.Data_sColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_1_ANull() {
                return this.IsNull(this.tableDayEn.T_1_AColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_1_ANull() {
                this[this.tableDayEn.T_1_AColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_2_ANull() {
                return this.IsNull(this.tableDayEn.T_2_AColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_2_ANull() {
                this[this.tableDayEn.T_2_AColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_3_ANull() {
                return this.IsNull(this.tableDayEn.T_3_AColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_3_ANull() {
                this[this.tableDayEn.T_3_AColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_1_RNull() {
                return this.IsNull(this.tableDayEn.T_1_RColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_1_RNull() {
                this[this.tableDayEn.T_1_RColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_2_RNull() {
                return this.IsNull(this.tableDayEn.T_2_RColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_2_RNull() {
                this[this.tableDayEn.T_2_RColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT_3_RNull() {
                return this.IsNull(this.tableDayEn.T_3_RColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT_3_RNull() {
                this[this.tableDayEn.T_3_RColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSutki_ANull() {
                return this.IsNull(this.tableDayEn.Sutki_AColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSutki_ANull() {
                this[this.tableDayEn.Sutki_AColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSutki_RNull() {
                return this.IsNull(this.tableDayEn.Sutki_RColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSutki_RNull() {
                this[this.tableDayEn.Sutki_RColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNarast_ANull() {
                return this.IsNull(this.tableDayEn.Narast_AColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNarast_ANull() {
                this[this.tableDayEn.Narast_AColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNarast_RNull() {
                return this.IsNull(this.tableDayEn.Narast_RColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNarast_RNull() {
                this[this.tableDayEn.Narast_RColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMax_ANull() {
                return this.IsNull(this.tableDayEn.Max_AColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMax_ANull() {
                this[this.tableDayEn.Max_AColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMax_RNull() {
                return this.IsNull(this.tableDayEn.Max_RColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMax_RNull() {
                this[this.tableDayEn.Max_RColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EnergyRow : System.Data.DataRow {
            
            private EnergyDataTable tableEnergy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnergyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnergy = ((EnergyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEnergy.DataInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataIn\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.DataInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E1 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E1\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E2 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E2\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E3 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E3\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E4 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E4\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E5 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E5\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E6 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E6\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E7 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E7\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E8 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E8\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E9 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E9Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E9\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E9Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E10 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E10Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E10\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E10Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E11 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E11Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E11\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E11Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E12 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E12Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E12\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E12Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E13 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E13Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E13\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E13Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E14 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E14Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E14\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E14Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E15 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E15Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E15\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E15Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double E16 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy.E16Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'E16\' in table \'Energy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy.E16Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataInNull() {
                return this.IsNull(this.tableEnergy.DataInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataInNull() {
                this[this.tableEnergy.DataInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE1Null() {
                return this.IsNull(this.tableEnergy.E1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE1Null() {
                this[this.tableEnergy.E1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE2Null() {
                return this.IsNull(this.tableEnergy.E2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE2Null() {
                this[this.tableEnergy.E2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE3Null() {
                return this.IsNull(this.tableEnergy.E3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE3Null() {
                this[this.tableEnergy.E3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE4Null() {
                return this.IsNull(this.tableEnergy.E4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE4Null() {
                this[this.tableEnergy.E4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE5Null() {
                return this.IsNull(this.tableEnergy.E5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE5Null() {
                this[this.tableEnergy.E5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE6Null() {
                return this.IsNull(this.tableEnergy.E6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE6Null() {
                this[this.tableEnergy.E6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE7Null() {
                return this.IsNull(this.tableEnergy.E7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE7Null() {
                this[this.tableEnergy.E7Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE8Null() {
                return this.IsNull(this.tableEnergy.E8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE8Null() {
                this[this.tableEnergy.E8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE9Null() {
                return this.IsNull(this.tableEnergy.E9Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE9Null() {
                this[this.tableEnergy.E9Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE10Null() {
                return this.IsNull(this.tableEnergy.E10Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE10Null() {
                this[this.tableEnergy.E10Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE11Null() {
                return this.IsNull(this.tableEnergy.E11Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE11Null() {
                this[this.tableEnergy.E11Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE12Null() {
                return this.IsNull(this.tableEnergy.E12Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE12Null() {
                this[this.tableEnergy.E12Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE13Null() {
                return this.IsNull(this.tableEnergy.E13Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE13Null() {
                this[this.tableEnergy.E13Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE14Null() {
                return this.IsNull(this.tableEnergy.E14Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE14Null() {
                this[this.tableEnergy.E14Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE15Null() {
                return this.IsNull(this.tableEnergy.E15Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE15Null() {
                this[this.tableEnergy.E15Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE16Null() {
                return this.IsNull(this.tableEnergy.E16Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE16Null() {
                this[this.tableEnergy.E16Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Energy30Row : System.Data.DataRow {
            
            private Energy30DataTable tableEnergy30;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Energy30Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnergy30 = ((Energy30DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEnergy30.DataInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataIn\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.DataInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEnergy30.TimeInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeIn\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.TimeInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I1 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I1\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I2 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I2\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I3 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I3\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I4 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I4\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I5 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I5\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I6 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I6\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I7 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I7\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I8 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I8\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I9 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I9Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I9\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I9Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I10 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I10Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I10\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I10Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I11 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I11Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I11\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I11Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I12 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I12Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I12\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I12Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I13 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I13Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I13\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I13Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I14 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I14Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I14\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I14Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I15 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I15Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I15\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I15Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I16 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I16Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I16\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I16Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I17 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I17Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I17\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I17Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I18 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I18Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I18\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I18Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I19 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I19Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I19\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I19Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I20 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I20Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I20\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I20Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I21 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I21Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I21\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I21Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I22 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I22Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I22\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I22Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I23 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I23Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I23\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I23Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I24 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I24Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I24\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I24Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I25 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I25Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I25\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I25Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I26 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I26Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I26\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I26Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I27 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I27Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I27\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I27Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I28 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I28Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I28\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I28Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I29 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I29Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I29\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I29Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I30 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I30Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I30\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I30Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I31 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I31Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I31\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I31Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double I32 {
                get {
                    try {
                        return ((double)(this[this.tableEnergy30.I32Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'I32\' in table \'Energy30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnergy30.I32Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataInNull() {
                return this.IsNull(this.tableEnergy30.DataInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataInNull() {
                this[this.tableEnergy30.DataInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeInNull() {
                return this.IsNull(this.tableEnergy30.TimeInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeInNull() {
                this[this.tableEnergy30.TimeInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI1Null() {
                return this.IsNull(this.tableEnergy30.I1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI1Null() {
                this[this.tableEnergy30.I1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI2Null() {
                return this.IsNull(this.tableEnergy30.I2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI2Null() {
                this[this.tableEnergy30.I2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI3Null() {
                return this.IsNull(this.tableEnergy30.I3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI3Null() {
                this[this.tableEnergy30.I3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI4Null() {
                return this.IsNull(this.tableEnergy30.I4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI4Null() {
                this[this.tableEnergy30.I4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI5Null() {
                return this.IsNull(this.tableEnergy30.I5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI5Null() {
                this[this.tableEnergy30.I5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI6Null() {
                return this.IsNull(this.tableEnergy30.I6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI6Null() {
                this[this.tableEnergy30.I6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI7Null() {
                return this.IsNull(this.tableEnergy30.I7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI7Null() {
                this[this.tableEnergy30.I7Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI8Null() {
                return this.IsNull(this.tableEnergy30.I8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI8Null() {
                this[this.tableEnergy30.I8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI9Null() {
                return this.IsNull(this.tableEnergy30.I9Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI9Null() {
                this[this.tableEnergy30.I9Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI10Null() {
                return this.IsNull(this.tableEnergy30.I10Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI10Null() {
                this[this.tableEnergy30.I10Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI11Null() {
                return this.IsNull(this.tableEnergy30.I11Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI11Null() {
                this[this.tableEnergy30.I11Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI12Null() {
                return this.IsNull(this.tableEnergy30.I12Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI12Null() {
                this[this.tableEnergy30.I12Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI13Null() {
                return this.IsNull(this.tableEnergy30.I13Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI13Null() {
                this[this.tableEnergy30.I13Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI14Null() {
                return this.IsNull(this.tableEnergy30.I14Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI14Null() {
                this[this.tableEnergy30.I14Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI15Null() {
                return this.IsNull(this.tableEnergy30.I15Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI15Null() {
                this[this.tableEnergy30.I15Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI16Null() {
                return this.IsNull(this.tableEnergy30.I16Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI16Null() {
                this[this.tableEnergy30.I16Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI17Null() {
                return this.IsNull(this.tableEnergy30.I17Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI17Null() {
                this[this.tableEnergy30.I17Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI18Null() {
                return this.IsNull(this.tableEnergy30.I18Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI18Null() {
                this[this.tableEnergy30.I18Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI19Null() {
                return this.IsNull(this.tableEnergy30.I19Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI19Null() {
                this[this.tableEnergy30.I19Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI20Null() {
                return this.IsNull(this.tableEnergy30.I20Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI20Null() {
                this[this.tableEnergy30.I20Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI21Null() {
                return this.IsNull(this.tableEnergy30.I21Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI21Null() {
                this[this.tableEnergy30.I21Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI22Null() {
                return this.IsNull(this.tableEnergy30.I22Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI22Null() {
                this[this.tableEnergy30.I22Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI23Null() {
                return this.IsNull(this.tableEnergy30.I23Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI23Null() {
                this[this.tableEnergy30.I23Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI24Null() {
                return this.IsNull(this.tableEnergy30.I24Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI24Null() {
                this[this.tableEnergy30.I24Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI25Null() {
                return this.IsNull(this.tableEnergy30.I25Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI25Null() {
                this[this.tableEnergy30.I25Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI26Null() {
                return this.IsNull(this.tableEnergy30.I26Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI26Null() {
                this[this.tableEnergy30.I26Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI27Null() {
                return this.IsNull(this.tableEnergy30.I27Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI27Null() {
                this[this.tableEnergy30.I27Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI28Null() {
                return this.IsNull(this.tableEnergy30.I28Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI28Null() {
                this[this.tableEnergy30.I28Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI29Null() {
                return this.IsNull(this.tableEnergy30.I29Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI29Null() {
                this[this.tableEnergy30.I29Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI30Null() {
                return this.IsNull(this.tableEnergy30.I30Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI30Null() {
                this[this.tableEnergy30.I30Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI31Null() {
                return this.IsNull(this.tableEnergy30.I31Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI31Null() {
                this[this.tableEnergy30.I31Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsI32Null() {
                return this.IsNull(this.tableEnergy30.I32Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetI32Null() {
                this[this.tableEnergy30.I32Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FamilyRow : System.Data.DataRow {
            
            private FamilyDataTable tableFamily;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamilyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFamily = ((FamilyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Код {
                get {
                    return ((int)(this[this.tableFamily.КодColumn]));
                }
                set {
                    this[this.tableFamily.КодColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableFamily.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'Family\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamily.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Family {
                get {
                    try {
                        return ((string)(this[this.tableFamily.FamilyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Family\' in table \'Family\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamily.FamilyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableFamily.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'Family\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamily.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableFamily.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableFamily.IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyNull() {
                return this.IsNull(this.tableFamily.FamilyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyNull() {
                this[this.tableFamily.FamilyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableFamily.PasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableFamily.PasswordColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Power3Row : System.Data.DataRow {
            
            private Power3DataTable tablePower3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Power3Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePower3 = ((Power3DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePower3.DataInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataIn\' in table \'Power3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower3.DataInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePower3.TimeInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeIn\' in table \'Power3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower3.TimeInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Power3 {
                get {
                    try {
                        return ((double)(this[this.tablePower3.Power3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Power3\' in table \'Power3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower3.Power3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataInNull() {
                return this.IsNull(this.tablePower3.DataInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataInNull() {
                this[this.tablePower3.DataInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeInNull() {
                return this.IsNull(this.tablePower3.TimeInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeInNull() {
                this[this.tablePower3.TimeInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPower3Null() {
                return this.IsNull(this.tablePower3.Power3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPower3Null() {
                this[this.tablePower3.Power3Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Power30Row : System.Data.DataRow {
            
            private Power30DataTable tablePower30;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Power30Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePower30 = ((Power30DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePower30.DataInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataIn\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.DataInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePower30.TimeInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeIn\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.TimeInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P1 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P1\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P2 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P2\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P3 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P3\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P4 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P4\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P5 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P5\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P6 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P6\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P7 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P7\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P8 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P8\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P9 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P9Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P9\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P9Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P10 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P10Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P10\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P10Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P11 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P11Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P11\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P11Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P12 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P12Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P12\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P12Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P13 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P13Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P13\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P13Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P14 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P14Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P14\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P14Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P15 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P15Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P15\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P15Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double P16 {
                get {
                    try {
                        return ((double)(this[this.tablePower30.P16Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'P16\' in table \'Power30\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePower30.P16Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataInNull() {
                return this.IsNull(this.tablePower30.DataInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataInNull() {
                this[this.tablePower30.DataInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeInNull() {
                return this.IsNull(this.tablePower30.TimeInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeInNull() {
                this[this.tablePower30.TimeInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1Null() {
                return this.IsNull(this.tablePower30.P1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1Null() {
                this[this.tablePower30.P1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP2Null() {
                return this.IsNull(this.tablePower30.P2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP2Null() {
                this[this.tablePower30.P2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP3Null() {
                return this.IsNull(this.tablePower30.P3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP3Null() {
                this[this.tablePower30.P3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP4Null() {
                return this.IsNull(this.tablePower30.P4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP4Null() {
                this[this.tablePower30.P4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP5Null() {
                return this.IsNull(this.tablePower30.P5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP5Null() {
                this[this.tablePower30.P5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP6Null() {
                return this.IsNull(this.tablePower30.P6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP6Null() {
                this[this.tablePower30.P6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP7Null() {
                return this.IsNull(this.tablePower30.P7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP7Null() {
                this[this.tablePower30.P7Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP8Null() {
                return this.IsNull(this.tablePower30.P8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP8Null() {
                this[this.tablePower30.P8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP9Null() {
                return this.IsNull(this.tablePower30.P9Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP9Null() {
                this[this.tablePower30.P9Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP10Null() {
                return this.IsNull(this.tablePower30.P10Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP10Null() {
                this[this.tablePower30.P10Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP11Null() {
                return this.IsNull(this.tablePower30.P11Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP11Null() {
                this[this.tablePower30.P11Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP12Null() {
                return this.IsNull(this.tablePower30.P12Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP12Null() {
                this[this.tablePower30.P12Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP13Null() {
                return this.IsNull(this.tablePower30.P13Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP13Null() {
                this[this.tablePower30.P13Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP14Null() {
                return this.IsNull(this.tablePower30.P14Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP14Null() {
                this[this.tablePower30.P14Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP15Null() {
                return this.IsNull(this.tablePower30.P15Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP15Null() {
                this[this.tablePower30.P15Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP16Null() {
                return this.IsNull(this.tablePower30.P16Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP16Null() {
                this[this.tablePower30.P16Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchetchikRow : System.Data.DataRow {
            
            private SchetchikDataTable tableSchetchik;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchetchikRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchetchik = ((SchetchikDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataIn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSchetchik.DataInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataIn\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.DataInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s1 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s1\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s2 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s2\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s3 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s3\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s4 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s4\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s5 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s5\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s6 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s6Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s6\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s6Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s7 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s7Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s7\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s7Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s8 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s8\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s9 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s9Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s9\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s9Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s10 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s10Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s10\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s10Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s11 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s11Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s11\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s11Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s12 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s12Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s12\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s12Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s13 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s13Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s13\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s13Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s14 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s14Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s14\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s14Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s15 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s15Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s15\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s15Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s16 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s16Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s16\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s16Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s17 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s17Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s17\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s17Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double s18 {
                get {
                    try {
                        return ((double)(this[this.tableSchetchik.s18Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'s18\' in table \'Schetchik\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchetchik.s18Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataInNull() {
                return this.IsNull(this.tableSchetchik.DataInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataInNull() {
                this[this.tableSchetchik.DataInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss1Null() {
                return this.IsNull(this.tableSchetchik.s1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets1Null() {
                this[this.tableSchetchik.s1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss2Null() {
                return this.IsNull(this.tableSchetchik.s2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets2Null() {
                this[this.tableSchetchik.s2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss3Null() {
                return this.IsNull(this.tableSchetchik.s3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets3Null() {
                this[this.tableSchetchik.s3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss4Null() {
                return this.IsNull(this.tableSchetchik.s4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets4Null() {
                this[this.tableSchetchik.s4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss5Null() {
                return this.IsNull(this.tableSchetchik.s5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets5Null() {
                this[this.tableSchetchik.s5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss6Null() {
                return this.IsNull(this.tableSchetchik.s6Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets6Null() {
                this[this.tableSchetchik.s6Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss7Null() {
                return this.IsNull(this.tableSchetchik.s7Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets7Null() {
                this[this.tableSchetchik.s7Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss8Null() {
                return this.IsNull(this.tableSchetchik.s8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets8Null() {
                this[this.tableSchetchik.s8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss9Null() {
                return this.IsNull(this.tableSchetchik.s9Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets9Null() {
                this[this.tableSchetchik.s9Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss10Null() {
                return this.IsNull(this.tableSchetchik.s10Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets10Null() {
                this[this.tableSchetchik.s10Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss11Null() {
                return this.IsNull(this.tableSchetchik.s11Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets11Null() {
                this[this.tableSchetchik.s11Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss12Null() {
                return this.IsNull(this.tableSchetchik.s12Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets12Null() {
                this[this.tableSchetchik.s12Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss13Null() {
                return this.IsNull(this.tableSchetchik.s13Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets13Null() {
                this[this.tableSchetchik.s13Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss14Null() {
                return this.IsNull(this.tableSchetchik.s14Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets14Null() {
                this[this.tableSchetchik.s14Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss15Null() {
                return this.IsNull(this.tableSchetchik.s15Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets15Null() {
                this[this.tableSchetchik.s15Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss16Null() {
                return this.IsNull(this.tableSchetchik.s16Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets16Null() {
                this[this.tableSchetchik.s16Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss17Null() {
                return this.IsNull(this.tableSchetchik.s17Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets17Null() {
                this[this.tableSchetchik.s17Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iss18Null() {
                return this.IsNull(this.tableSchetchik.s18Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sets18Null() {
                this[this.tableSchetchik.s18Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tttRow : System.Data.DataRow {
            
            private tttDataTable tablettt;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tttRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablettt = ((tttDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ttt1 {
                get {
                    try {
                        return ((string)(this[this.tablettt.ttt1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ttt1\' in table \'ttt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablettt.ttt1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ttt2 {
                get {
                    try {
                        return ((int)(this[this.tablettt.ttt2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ttt2\' in table \'ttt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablettt.ttt2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ttt3 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablettt.ttt3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ttt3\' in table \'ttt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablettt.ttt3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ttt4 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablettt.ttt4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ttt4\' in table \'ttt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablettt.ttt4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isttt1Null() {
                return this.IsNull(this.tablettt.ttt1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setttt1Null() {
                this[this.tablettt.ttt1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isttt2Null() {
                return this.IsNull(this.tablettt.ttt2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setttt2Null() {
                this[this.tablettt.ttt2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isttt3Null() {
                return this.IsNull(this.tablettt.ttt3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setttt3Null() {
                this[this.tablettt.ttt3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isttt4Null() {
                return this.IsNull(this.tablettt.ttt4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setttt4Null() {
                this[this.tablettt.ttt4Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DayEnRowChangeEvent : System.EventArgs {
            
            private DayEnRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DayEnRowChangeEvent(DayEnRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DayEnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EnergyRowChangeEvent : System.EventArgs {
            
            private EnergyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnergyRowChangeEvent(EnergyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnergyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Energy30RowChangeEvent : System.EventArgs {
            
            private Energy30Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Energy30RowChangeEvent(Energy30Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Energy30Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FamilyRowChangeEvent : System.EventArgs {
            
            private FamilyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyRowChangeEvent(FamilyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Power3RowChangeEvent : System.EventArgs {
            
            private Power3Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power3RowChangeEvent(Power3Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Power30RowChangeEvent : System.EventArgs {
            
            private Power30Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power30RowChangeEvent(Power30Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Power30Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchetchikRowChangeEvent : System.EventArgs {
            
            private SchetchikRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchetchikRowChangeEvent(SchetchikRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchetchikRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tttRowChangeEvent : System.EventArgs {
            
            private tttRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tttRowChangeEvent(tttRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tttRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace viewer2.dbaseDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DayEnTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DayEnTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DayEn";
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Data_s", "Data_s");
            tableMapping.ColumnMappings.Add("T_1_A", "T_1_A");
            tableMapping.ColumnMappings.Add("T_2_A", "T_2_A");
            tableMapping.ColumnMappings.Add("T_3_A", "T_3_A");
            tableMapping.ColumnMappings.Add("T_1_R", "T_1_R");
            tableMapping.ColumnMappings.Add("T_2_R", "T_2_R");
            tableMapping.ColumnMappings.Add("T_3_R", "T_3_R");
            tableMapping.ColumnMappings.Add("Sutki_A", "Sutki_A");
            tableMapping.ColumnMappings.Add("Sutki_R", "Sutki_R");
            tableMapping.ColumnMappings.Add("Narast_A", "Narast_A");
            tableMapping.ColumnMappings.Add("Narast_R", "Narast_R");
            tableMapping.ColumnMappings.Add("Max_A", "Max_A");
            tableMapping.ColumnMappings.Add("Max_R", "Max_R");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `DayEn` (`Number`, `Data_s`, `T_1_A`, `T_2_A`, `T_3_A`, `T_1_R`, `T_2" +
                "_R`, `T_3_R`, `Sutki_A`, `Sutki_R`, `Narast_A`, `Narast_R`, `Max_A`, `Max_R`) VA" +
                "LUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Number", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Number", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Data_s", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Data_s", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("T_1_A", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "T_1_A", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("T_2_A", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "T_2_A", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("T_3_A", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "T_3_A", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("T_1_R", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "T_1_R", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("T_2_R", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "T_2_R", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("T_3_R", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "T_3_R", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Sutki_A", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sutki_A", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Sutki_R", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sutki_R", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Narast_A", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Narast_A", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Narast_R", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Narast_R", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Max_A", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Max_A", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Max_R", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Max_R", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Number], Data_s, T_1_A, T_2_A, T_3_A, T_1_R, T_2_R, T_3_R, Sutki_A, Sutki" +
                "_R, Narast_A, Narast_R, Max_A, Max_R FROM DayEn";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.DayEnDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.DayEnDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.DayEnDataTable dataTable = new dbaseDataSet.DayEnDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.DayEnDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DayEn");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> Number, string Data_s, System.Nullable<int> T_1_A, System.Nullable<int> T_2_A, System.Nullable<int> T_3_A, System.Nullable<int> T_1_R, System.Nullable<int> T_2_R, System.Nullable<int> T_3_R, System.Nullable<int> Sutki_A, System.Nullable<int> Sutki_R, System.Nullable<int> Narast_A, System.Nullable<int> Narast_R, System.Nullable<int> Max_A, System.Nullable<int> Max_R) {
            if ((Number.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Number.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Data_s == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Data_s));
            }
            if ((T_1_A.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(T_1_A.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((T_2_A.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(T_2_A.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((T_3_A.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(T_3_A.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((T_1_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(T_1_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((T_2_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(T_2_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((T_3_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(T_3_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Sutki_A.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Sutki_A.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Sutki_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Sutki_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Narast_A.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Narast_A.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Narast_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(Narast_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Max_A.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(Max_A.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Max_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(Max_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EnergyTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EnergyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Energy";
            tableMapping.ColumnMappings.Add("DataIn", "DataIn");
            tableMapping.ColumnMappings.Add("E1", "E1");
            tableMapping.ColumnMappings.Add("E2", "E2");
            tableMapping.ColumnMappings.Add("E3", "E3");
            tableMapping.ColumnMappings.Add("E4", "E4");
            tableMapping.ColumnMappings.Add("E5", "E5");
            tableMapping.ColumnMappings.Add("E6", "E6");
            tableMapping.ColumnMappings.Add("E7", "E7");
            tableMapping.ColumnMappings.Add("E8", "E8");
            tableMapping.ColumnMappings.Add("E9", "E9");
            tableMapping.ColumnMappings.Add("E10", "E10");
            tableMapping.ColumnMappings.Add("E11", "E11");
            tableMapping.ColumnMappings.Add("E12", "E12");
            tableMapping.ColumnMappings.Add("E13", "E13");
            tableMapping.ColumnMappings.Add("E14", "E14");
            tableMapping.ColumnMappings.Add("E15", "E15");
            tableMapping.ColumnMappings.Add("E16", "E16");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Energy` (`DataIn`, `E1`, `E2`, `E3`, `E4`, `E5`, `E6`, `E7`, `E8`, `" +
                "E9`, `E10`, `E11`, `E12`, `E13`, `E14`, `E15`, `E16`) VALUES (?, ?, ?, ?, ?, ?, " +
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DataIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E1", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E2", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E3", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E4", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E4", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E5", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E5", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E6", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E6", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E7", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E7", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E8", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E8", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E9", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E9", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E10", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E10", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E11", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E11", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E12", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E12", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E13", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E13", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E14", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E14", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E15", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E15", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("E16", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "E16", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DataIn, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, " +
                "E16 FROM Energy";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.EnergyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.EnergyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.EnergyDataTable dataTable = new dbaseDataSet.EnergyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.EnergyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Energy");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.DateTime DataIn, 
                    System.Nullable<double> E1, 
                    System.Nullable<double> E2, 
                    System.Nullable<double> E3, 
                    System.Nullable<double> E4, 
                    System.Nullable<double> E5, 
                    System.Nullable<double> E6, 
                    System.Nullable<double> E7, 
                    System.Nullable<double> E8, 
                    System.Nullable<double> E9, 
                    System.Nullable<double> E10, 
                    System.Nullable<double> E11, 
                    System.Nullable<double> E12, 
                    System.Nullable<double> E13, 
                    System.Nullable<double> E14, 
                    System.Nullable<double> E15, 
                    System.Nullable<double> E16) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(DataIn));
            if ((E1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(E1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((E2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(E2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((E3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(E3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((E4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(E4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((E5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(E5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((E6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(E6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((E7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(E7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((E8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(E8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((E9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(E9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((E10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(E10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((E11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(E11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((E12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(E12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((E13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(E13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((E14.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(E14.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((E15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(E15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((E16.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(E16.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Energy30TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Energy30TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Energy30";
            tableMapping.ColumnMappings.Add("DataIn", "DataIn");
            tableMapping.ColumnMappings.Add("TimeIn", "TimeIn");
            tableMapping.ColumnMappings.Add("I1", "I1");
            tableMapping.ColumnMappings.Add("I2", "I2");
            tableMapping.ColumnMappings.Add("I3", "I3");
            tableMapping.ColumnMappings.Add("I4", "I4");
            tableMapping.ColumnMappings.Add("I5", "I5");
            tableMapping.ColumnMappings.Add("I6", "I6");
            tableMapping.ColumnMappings.Add("I7", "I7");
            tableMapping.ColumnMappings.Add("I8", "I8");
            tableMapping.ColumnMappings.Add("I9", "I9");
            tableMapping.ColumnMappings.Add("I10", "I10");
            tableMapping.ColumnMappings.Add("I11", "I11");
            tableMapping.ColumnMappings.Add("I12", "I12");
            tableMapping.ColumnMappings.Add("I13", "I13");
            tableMapping.ColumnMappings.Add("I14", "I14");
            tableMapping.ColumnMappings.Add("I15", "I15");
            tableMapping.ColumnMappings.Add("I16", "I16");
            tableMapping.ColumnMappings.Add("I17", "I17");
            tableMapping.ColumnMappings.Add("I18", "I18");
            tableMapping.ColumnMappings.Add("I19", "I19");
            tableMapping.ColumnMappings.Add("I20", "I20");
            tableMapping.ColumnMappings.Add("I21", "I21");
            tableMapping.ColumnMappings.Add("I22", "I22");
            tableMapping.ColumnMappings.Add("I23", "I23");
            tableMapping.ColumnMappings.Add("I24", "I24");
            tableMapping.ColumnMappings.Add("I25", "I25");
            tableMapping.ColumnMappings.Add("I26", "I26");
            tableMapping.ColumnMappings.Add("I27", "I27");
            tableMapping.ColumnMappings.Add("I28", "I28");
            tableMapping.ColumnMappings.Add("I29", "I29");
            tableMapping.ColumnMappings.Add("I30", "I30");
            tableMapping.ColumnMappings.Add("I31", "I31");
            tableMapping.ColumnMappings.Add("I32", "I32");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `Energy30` (`DataIn`, `TimeIn`, `I1`, `I2`, `I3`, `I4`, `I5`, `I6`, `I7`, `I8`, `I9`, `I10`, `I11`, `I12`, `I13`, `I14`, `I15`, `I16`, `I17`, `I18`, `I19`, `I20`, `I21`, `I22`, `I23`, `I24`, `I25`, `I26`, `I27`, `I28`, `I29`, `I30`, `I31`, `I32`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DataIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("TimeIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I1", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I2", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I3", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I4", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I4", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I5", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I5", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I6", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I6", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I7", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I7", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I8", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I8", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I9", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I9", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I10", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I10", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I11", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I11", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I12", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I12", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I13", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I13", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I14", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I14", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I15", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I15", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I16", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I16", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I17", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I17", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I18", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I18", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I19", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I19", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I20", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I20", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I21", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I21", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I22", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I22", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I23", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I23", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I24", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I24", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I25", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I25", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I26", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I26", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I27", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I27", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I28", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I28", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I29", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I29", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I30", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I30", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I31", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I31", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("I32", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "I32", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DataIn, TimeIn, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I1" +
                "4, I15, I16, I17, I18, I19, I20, I21, I22, I23, I24, I25, I26, I27, I28, I29, I3" +
                "0, I31, I32 FROM Energy30";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.Energy30DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.Energy30DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.Energy30DataTable dataTable = new dbaseDataSet.Energy30DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.Energy30DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Energy30");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Nullable<System.DateTime> DataIn, 
                    System.Nullable<System.DateTime> TimeIn, 
                    System.Nullable<double> I1, 
                    System.Nullable<double> I2, 
                    System.Nullable<double> I3, 
                    System.Nullable<double> I4, 
                    System.Nullable<double> I5, 
                    System.Nullable<double> I6, 
                    System.Nullable<double> I7, 
                    System.Nullable<double> I8, 
                    System.Nullable<double> I9, 
                    System.Nullable<double> I10, 
                    System.Nullable<double> I11, 
                    System.Nullable<double> I12, 
                    System.Nullable<double> I13, 
                    System.Nullable<double> I14, 
                    System.Nullable<double> I15, 
                    System.Nullable<double> I16, 
                    System.Nullable<double> I17, 
                    System.Nullable<double> I18, 
                    System.Nullable<double> I19, 
                    System.Nullable<double> I20, 
                    System.Nullable<double> I21, 
                    System.Nullable<double> I22, 
                    System.Nullable<double> I23, 
                    System.Nullable<double> I24, 
                    System.Nullable<double> I25, 
                    System.Nullable<double> I26, 
                    System.Nullable<double> I27, 
                    System.Nullable<double> I28, 
                    System.Nullable<double> I29, 
                    System.Nullable<double> I30, 
                    System.Nullable<double> I31, 
                    System.Nullable<double> I32) {
            if ((DataIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(DataIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((TimeIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(TimeIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((I1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(I1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((I2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(I2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((I3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(I3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((I4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(I4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((I5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(I5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((I6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(I6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((I7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(I7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((I8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(I8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((I9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(I9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((I10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(I10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((I11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(I11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((I12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(I12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((I13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(I13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((I14.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(I14.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((I15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(I15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((I16.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(I16.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((I17.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(I17.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((I18.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(I18.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((I19.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(I19.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((I20.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(I20.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((I21.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(I21.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((I22.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(I22.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((I23.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(I23.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((I24.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(I24.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = System.DBNull.Value;
            }
            if ((I25.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(I25.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((I26.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((double)(I26.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = System.DBNull.Value;
            }
            if ((I27.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((double)(I27.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((I28.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(I28.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = System.DBNull.Value;
            }
            if ((I29.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((double)(I29.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((I30.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((double)(I30.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = System.DBNull.Value;
            }
            if ((I31.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((double)(I31.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((I32.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((double)(I32.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FamilyTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FamilyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Family";
            tableMapping.ColumnMappings.Add("Код", "Код");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Family", "Family");
            tableMapping.ColumnMappings.Add("Password", "Password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `Family` WHERE ((`Код` = ?) AND ((? = 1 AND `ID` IS NULL) OR (`ID` = " +
                "?)) AND ((? = 1 AND `Family` IS NULL) OR (`Family` = ?)) AND ((? = 1 AND `Passwo" +
                "rd` IS NULL) OR (`Password` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Код", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Код", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_Family", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Family", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Family", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Family", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_Password", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Password", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Password", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Password", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Family` (`ID`, `Family`, `Password`) VALUES (?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Family", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Family", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Password", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Password", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `Family` SET `ID` = ?, `Family` = ?, `Password` = ? WHERE ((`Код` = ?) AND" +
                " ((? = 1 AND `ID` IS NULL) OR (`ID` = ?)) AND ((? = 1 AND `Family` IS NULL) OR (" +
                "`Family` = ?)) AND ((? = 1 AND `Password` IS NULL) OR (`Password` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Family", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Family", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Password", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Password", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Код", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Код", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_Family", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Family", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Family", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Family", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_Password", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Password", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Password", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Password", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Код, ID, Family, [Password] FROM Family";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.FamilyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.FamilyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.FamilyDataTable dataTable = new dbaseDataSet.FamilyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.FamilyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Family");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код, System.Nullable<int> Original_ID, string Original_Family, string Original_Password) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код));
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_Family == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Family));
            }
            if ((Original_Password == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> ID, string Family, string Password) {
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Family == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Family));
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> ID, string Family, string Password, int Original_Код, System.Nullable<int> Original_ID, string Original_Family, string Original_Password) {
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Family == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Family));
            }
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Password));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_Код));
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_Family == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Family));
            }
            if ((Original_Password == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Power3TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Power3TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Power3";
            tableMapping.ColumnMappings.Add("DataIn", "DataIn");
            tableMapping.ColumnMappings.Add("TimeIn", "TimeIn");
            tableMapping.ColumnMappings.Add("Power3", "Power3");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Power3` (`DataIn`, `TimeIn`, `Power3`) VALUES (?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DataIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("TimeIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Power3", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Power3", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DataIn, TimeIn, Power3 FROM Power3";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.Power3DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.Power3DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.Power3DataTable dataTable = new dbaseDataSet.Power3DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.Power3DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Power3");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.DateTime> DataIn, System.Nullable<System.DateTime> TimeIn, System.Nullable<double> Power3) {
            if ((DataIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(DataIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((TimeIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(TimeIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Power3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(Power3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Power30TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Power30TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Power30";
            tableMapping.ColumnMappings.Add("DataIn", "DataIn");
            tableMapping.ColumnMappings.Add("TimeIn", "TimeIn");
            tableMapping.ColumnMappings.Add("P1", "P1");
            tableMapping.ColumnMappings.Add("P2", "P2");
            tableMapping.ColumnMappings.Add("P3", "P3");
            tableMapping.ColumnMappings.Add("P4", "P4");
            tableMapping.ColumnMappings.Add("P5", "P5");
            tableMapping.ColumnMappings.Add("P6", "P6");
            tableMapping.ColumnMappings.Add("P7", "P7");
            tableMapping.ColumnMappings.Add("P8", "P8");
            tableMapping.ColumnMappings.Add("P9", "P9");
            tableMapping.ColumnMappings.Add("P10", "P10");
            tableMapping.ColumnMappings.Add("P11", "P11");
            tableMapping.ColumnMappings.Add("P12", "P12");
            tableMapping.ColumnMappings.Add("P13", "P13");
            tableMapping.ColumnMappings.Add("P14", "P14");
            tableMapping.ColumnMappings.Add("P15", "P15");
            tableMapping.ColumnMappings.Add("P16", "P16");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Power30` (`DataIn`, `TimeIn`, `P1`, `P2`, `P3`, `P4`, `P5`, `P6`, `P" +
                "7`, `P8`, `P9`, `P10`, `P11`, `P12`, `P13`, `P14`, `P15`, `P16`) VALUES (?, ?, ?" +
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DataIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("TimeIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P1", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P2", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P3", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P4", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P4", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P5", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P5", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P6", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P6", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P7", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P7", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P8", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P8", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P9", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P9", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P10", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P10", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P11", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P11", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P12", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P12", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P13", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P13", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P14", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P14", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P15", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P15", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("P16", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "P16", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DataIn, TimeIn, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P1" +
                "4, P15, P16 FROM Power30";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.Power30DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.Power30DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.Power30DataTable dataTable = new dbaseDataSet.Power30DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.Power30DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Power30");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Nullable<System.DateTime> DataIn, 
                    System.Nullable<System.DateTime> TimeIn, 
                    System.Nullable<double> P1, 
                    System.Nullable<double> P2, 
                    System.Nullable<double> P3, 
                    System.Nullable<double> P4, 
                    System.Nullable<double> P5, 
                    System.Nullable<double> P6, 
                    System.Nullable<double> P7, 
                    System.Nullable<double> P8, 
                    System.Nullable<double> P9, 
                    System.Nullable<double> P10, 
                    System.Nullable<double> P11, 
                    System.Nullable<double> P12, 
                    System.Nullable<double> P13, 
                    System.Nullable<double> P14, 
                    System.Nullable<double> P15, 
                    System.Nullable<double> P16) {
            if ((DataIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(DataIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((TimeIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(TimeIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((P1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(P1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((P2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(P2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((P3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(P3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((P4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(P4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((P5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(P5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((P6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(P6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((P7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(P7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((P8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(P8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((P9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(P9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((P10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(P10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((P11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(P11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((P12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(P12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((P13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(P13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((P14.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(P14.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((P15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(P15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((P16.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(P16.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchetchikTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchetchikTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Schetchik";
            tableMapping.ColumnMappings.Add("DataIn", "DataIn");
            tableMapping.ColumnMappings.Add("s1", "s1");
            tableMapping.ColumnMappings.Add("s2", "s2");
            tableMapping.ColumnMappings.Add("s3", "s3");
            tableMapping.ColumnMappings.Add("s4", "s4");
            tableMapping.ColumnMappings.Add("s5", "s5");
            tableMapping.ColumnMappings.Add("s6", "s6");
            tableMapping.ColumnMappings.Add("s7", "s7");
            tableMapping.ColumnMappings.Add("s8", "s8");
            tableMapping.ColumnMappings.Add("s9", "s9");
            tableMapping.ColumnMappings.Add("s10", "s10");
            tableMapping.ColumnMappings.Add("s11", "s11");
            tableMapping.ColumnMappings.Add("s12", "s12");
            tableMapping.ColumnMappings.Add("s13", "s13");
            tableMapping.ColumnMappings.Add("s14", "s14");
            tableMapping.ColumnMappings.Add("s15", "s15");
            tableMapping.ColumnMappings.Add("s16", "s16");
            tableMapping.ColumnMappings.Add("s17", "s17");
            tableMapping.ColumnMappings.Add("s18", "s18");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Schetchik` (`DataIn`, `s1`, `s2`, `s3`, `s4`, `s5`, `s6`, `s7`, `s8`" +
                ", `s9`, `s10`, `s11`, `s12`, `s13`, `s14`, `s15`, `s16`, `s17`, `s18`) VALUES (?" +
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DataIn", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataIn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s1", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s2", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s3", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s4", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s4", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s5", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s5", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s6", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s6", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s7", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s7", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s8", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s8", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s9", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s9", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s10", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s10", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s11", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s11", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s12", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s12", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s13", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s13", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s14", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s14", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s15", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s15", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s16", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s16", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s17", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s17", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("s18", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "s18", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DataIn, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, " +
                "s16, s17, s18 FROM Schetchik order by 1";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.SchetchikDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.SchetchikDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.SchetchikDataTable dataTable = new dbaseDataSet.SchetchikDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.SchetchikDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Schetchik");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Nullable<System.DateTime> DataIn, 
                    System.Nullable<double> s1, 
                    System.Nullable<double> s2, 
                    System.Nullable<double> s3, 
                    System.Nullable<double> s4, 
                    System.Nullable<double> s5, 
                    System.Nullable<double> s6, 
                    System.Nullable<double> s7, 
                    System.Nullable<double> s8, 
                    System.Nullable<double> s9, 
                    System.Nullable<double> s10, 
                    System.Nullable<double> s11, 
                    System.Nullable<double> s12, 
                    System.Nullable<double> s13, 
                    System.Nullable<double> s14, 
                    System.Nullable<double> s15, 
                    System.Nullable<double> s16, 
                    System.Nullable<double> s17, 
                    System.Nullable<double> s18) {
            if ((DataIn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(DataIn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((s1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(s1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((s2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(s2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((s3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(s3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((s4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(s4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((s5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(s5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((s6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(s6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((s7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(s7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((s8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(s8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((s9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(s9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((s10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(s10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((s11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(s11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((s12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(s12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((s13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(s13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((s14.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(s14.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((s15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(s15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((s16.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(s16.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((s17.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(s17.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((s18.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(s18.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tttTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tttTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ttt";
            tableMapping.ColumnMappings.Add("ttt1", "ttt1");
            tableMapping.ColumnMappings.Add("ttt2", "ttt2");
            tableMapping.ColumnMappings.Add("ttt3", "ttt3");
            tableMapping.ColumnMappings.Add("ttt4", "ttt4");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `ttt` (`ttt1`, `ttt2`, `ttt3`, `ttt4`) VALUES (?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ttt1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ttt1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ttt2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ttt2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ttt3", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ttt3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ttt4", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ttt4", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::viewer2.Properties.Settings.Default.dbaseConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ttt1, ttt2, ttt3, ttt4 FROM ttt";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dbaseDataSet.tttDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dbaseDataSet.tttDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dbaseDataSet.tttDataTable dataTable = new dbaseDataSet.tttDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet.tttDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dbaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ttt");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ttt1, System.Nullable<int> ttt2, System.Nullable<System.DateTime> ttt3, System.Nullable<System.DateTime> ttt4) {
            if ((ttt1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ttt1));
            }
            if ((ttt2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ttt2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ttt3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(ttt3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((ttt4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(ttt4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591